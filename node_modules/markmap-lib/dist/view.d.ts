import * as d3 from 'd3';
import { INode, IMarkmapOptions, IMarkmapState, IMarkmapFlexTreeItem } from './types';
import { Hook } from './util/hook';
export { loadJS, loadCSS } from './util';
declare type ID3SVGElement = d3.Selection<SVGElement, IMarkmapFlexTreeItem, HTMLElement, IMarkmapFlexTreeItem>;
declare function createViewHooks(): {
    transformHtml: Hook<(mm: Markmap, nodes: HTMLElement[]) => void>;
};
export declare function registerRefreshPromise(promise: Promise<any>): void;
export declare class Markmap {
    options: IMarkmapOptions;
    state: IMarkmapState;
    svg: ID3SVGElement;
    styleNode: d3.Selection<HTMLStyleElement, IMarkmapFlexTreeItem, HTMLElement, IMarkmapFlexTreeItem>;
    g: d3.Selection<SVGGElement, IMarkmapFlexTreeItem, HTMLElement, IMarkmapFlexTreeItem>;
    zoom: d3.ZoomBehavior<Element, unknown>;
    viewHooks: ReturnType<typeof createViewHooks>;
    constructor(svg: string | SVGElement | ID3SVGElement, opts?: IMarkmapOptions);
    getStyleContent(): string;
    updateStyle(): void;
    handleZoom(): void;
    handleClick(d: IMarkmapFlexTreeItem): void;
    initializeData(node: INode): void;
    setOptions(opts: IMarkmapOptions): void;
    setData(data?: INode, opts?: IMarkmapOptions): void;
    renderData(originData?: INode): void;
    transition<T extends d3.BaseType, U, P extends d3.BaseType, Q>(sel: d3.Selection<T, U, P, Q>): d3.Transition<T, U, P, Q>;
    fit(): Promise<void>;
    rescale(scale: number): Promise<void>;
    static create(svg: string | SVGElement | ID3SVGElement, opts?: IMarkmapOptions, data?: INode): Markmap;
}
export declare type IMarkmap = typeof Markmap;
